
/**
 *  JayCompilerLexerAntlr4 class shows how a scanner generated by
 *  ANTLR4 is running to process only tokens. The tokens generated
 *  are produced by @see org.antlr.v4.runtime.Token.
 */

package co;
 
import co.edu.eafit.dis.st0270.p20151.mariana.pl0.lexer.marianaAntlrLexer;
import java.io.IOException;
import org.antlr.v4.runtime.ANTLRFileStream;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.*;
import java.lang.Object.*;
import java.util.*;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.Recognizer;
import org.antlr.v4.runtime.BaseErrorListener;
import org.antlr.v4.runtime.ANTLRErrorListener;
import org.antlr.v4.runtime.RecognitionException;
public class MainmarianaAntlrLexer {

  static boolean salir = false;

    private static void usage(int errcode, Token t) {

	        System.err.println("error: " +'"'+t.getText()+'"'+
        	                   " fila: " + t.getLine() +
                 	           " col: " + t.getCharPositionInLine());

		salir=true;
    }

    private static void printToken(Token t, String type) {

	int aux;
 
	if(type=="integer"){

 	int valint = 2147483647;
		try{
		aux=Integer.parseInt(t.getText());
		System.out.println("tipo: " + type +
				" valor: " +'"'+ t.getText() +'"'+
				" fila: " + t.getLine() + 
				" col: " + t.getCharPositionInLine());

		}
		catch(NumberFormatException e){
		usage(1,t);
		}

 	}else if(type.equals("unknow")){
		for(int i=0;i<t.getText().length();i++){
			char sacarle = t.getText().charAt(0);
			int numass = (int)sacarle;

			if(numass<32 || numass>=126){
   			System.out.println("tipo: " + type +
				" valor: " +'"'+ numass +'"'+
				" fila: " + t.getLine() + 
				" col: " + t.getCharPositionInLine());

			System.exit(1);			
			}else{
			usage(1,t);
		}
}
	}else if ((type.equals("identifier")) && (t.getText().length()>32)){
		usage(1,t);
		}else{

        System.out.println("tipo: " + type +
                           " valor: " + '"'+t.getText() +'"'+
                           " fila: " + t.getLine() +
                           " col: " + t.getCharPositionInLine());
   	 }
    }

    public static void main(String args[]) {

	if(args.length==0){
	
       		CharStream afs = null;
		marianaAntlrLexer lexer;
		Token t, eof;
	
       		 try {
	
        	    afs = new ANTLRInputStream(System.in);
       		 }
       		 catch (IOException ioe) {
       		System.err.println("error: "+ioe);
		System.exit(2);
		 }

         lexer = new marianaAntlrLexer(afs);
         t = lexer.nextToken();
	 eof = lexer.emitEOF();
         System.out.println("Fichero: Entrada Estandar");

        while (t.getType() != eof.getType()) {
       	if(!salir){
	
            switch(t.getType()) {

            case marianaAntlrLexer.WHITESPACE:

                // Ignore files
                break;

            case marianaAntlrLexer.SEPARATOR:

                printToken(t, "separator");
                break;

            case marianaAntlrLexer.OPERATOR:


                printToken(t, "operator");
                break;

            case marianaAntlrLexer.KEYWORDS:

                printToken(t, "keywords");
                break;

            case marianaAntlrLexer.INT:

                printToken(t, "integer");
                break;

            case marianaAntlrLexer.IDENTIFIER:

                printToken(t, "identifier");
                break;

           case marianaAntlrLexer.CHAR:
		printToken(t,"unknow");
		break;
		}
	
	   t = lexer.nextToken();

         }else{break;}

	}

	}

     for(int i=0;i<args.length;i++){

	if(i!=0){
	salir=false;
	}

        CharStream afs = null;
	marianaAntlrLexer lexer;
	Token t, eof;

		if(args[i].equals("-")){     

       			 try {

        	    	afs = new ANTLRInputStream(System.in);
       			 }
		       	 catch (IOException ioe) {
			System.err.println("error: " +ioe);
			System.exit(2);
       			}


         lexer = new marianaAntlrLexer(afs);
         t = lexer.nextToken();
	 eof = lexer.emitEOF();
         System.out.println("Fichero: Entrada Estandar");
	
	}else{


           try {
		afs =new ANTLRFileStream(args[i]);
	   }
	   catch (IOException ioe){
	   System.err.println("error: " + ioe);
	   System.exit(2);
	   }

	  lexer = new marianaAntlrLexer(afs);
	   t = lexer.nextToken();
	  eof = lexer.emitEOF();
	  System.out.println("Fichero: " + args[i]);

        }

        while (t.getType() != eof.getType()) {
		if(!salir){
            switch(t.getType()) {

            case marianaAntlrLexer.WHITESPACE:

                // Ignore files
                break;

            case marianaAntlrLexer.SEPARATOR:

                printToken(t, "separator");
                break;

            case marianaAntlrLexer.OPERATOR:

                printToken(t, "operator");
                break;

            case marianaAntlrLexer.KEYWORDS:

                printToken(t, "keywords");
                break;

            case marianaAntlrLexer.INT:

                printToken(t, "integer");
                break;

            case marianaAntlrLexer.IDENTIFIER:

                printToken(t, "Identifier");
                break;

            case marianaAntlrLexer.CHAR:
		printToken(t,"unknow");
		break;

		}

            t = lexer.nextToken();
        }else{break;}

    }
}

}

}
